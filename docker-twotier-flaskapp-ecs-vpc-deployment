cd#####################################################deploying 2 tier flask-sql-ecs-using dicker hub ############################################################

1] Creating Cluster
cluster name: twotier_cluster
Infrastructure - optional : AWS Fargate (serverless)
click create
2] creating task defination for SQL 1st task
go to task defination and create new task defination
Task definition family: twotier_task_sql
lunch type: aws fargate
Network mode: awsvpc
set cpu and memory
Task execution role: ecsTaskExecutionRole
container name:mysql
Image URI: mysql:5.7
Essential container: yes
container port: Container port
Protocol :tcp
App Protocol:HTTP
allocate resources soft and hard limit
3] ADD Environment variables
Key: MYSQL_DATABASE
Value type:Value
Value:myDb
MYSQL_USER=admin
MYSQL_PASSWORD=admin
MYSQL_ROOT_PASSWORD=admin
tick mark log collection
4] go to cluster and create 1 SERVICE
select launch type
select task defination family
select latest revision
service name:twotier-service_sql
select replicas and insert number of replicas required
select/unselect  Availability Zone rebalancing
go to networking
select default vpc
select 2 seubnets
select security group you created
with following inbound rules:
–
security group rules:
MYSQL/Aurora
TCP
3306
0.0.0.0/0
–

Custom TCP
TCP
5000
0.0.0.0/0
–

public ip turn on
 click create 
go to service select task running and copy it public ip for later use

5] creating task defination for FLASK 2nd task
Task definition family: twotier_task_flask
select aws fargate
select cpu and memeory
select task execution role : ecsTaskExecutionRole
container name: flaskapp
image url:taimooranwar/flaskapp:latest
essential : yes
container port: 5000
tcp
Appprotocol: HTTP
ALLOCATE RESOURCES soft and hard limit


MYSQL_HOST = ip of my sql task running in service

MYSQL_USER = admin

MYSQL_PASSWORD = admin

MYSQL_DB = myDb

tick mark log collection
and create task
6] go to cluster and create 2 SERVICE
select launch type
select task defination family
select latest revision
service name:twotier-service_flask
select replicas and insert number of replicas required
select/unselect  Availability Zone rebalancing
go to networking
select default vpc
select 2 subnets
select security group you created
public ip turn on
click create 

7] see it ip and paste on chrome with port 5000 to see result
http://<Public-IP>:5000/
